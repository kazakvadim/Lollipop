apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    def str = stdout.toString().trim()
    def dash_index = str.indexOf('-')

    versionMajor = str.substring(1, str.indexOf('.')).toInteger()
    if (dash_index != -1) {
        versionPatch = str.substring(dash_index + 1, str.indexOf('-', dash_index + 1)).toInteger()
        versionMinor = str.substring(str.indexOf('.') + 1, dash_index).toInteger()
    } else {
        versionMinor = str.substring(str.indexOf('.') + 1).toInteger()
    }

    return "${versionMajor}.${versionMinor}.${versionPatch}"

}
def getVersionCode = { ->
    return versionMajor * 10000 + versionMinor * 100 + versionPatch
}
android {
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.kazak.lollipop"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode getVersionCode()
        versionName getVersionName()
        System.out.println('version ' + getVersionName())
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.config
    }
    dataBinding {
        enabled = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "${variant.applicationId}-${variant.versionName}.apk"
            }
        }
    }
    flavorDimensions "app"
    productFlavors {
        developer {
            versionNameSuffix "-dev"
            manifestPlaceholders.screenOrientation = "sensor"
        }
        stable {
            manifestPlaceholders.screenOrientation = "portrait"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha2'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation "android.arch.navigation:navigation-fragment-ktx:1.0.0-alpha07"
    implementation "android.arch.navigation:navigation-ui-ktx:1.0.0-alpha07"
    implementation 'com.google.firebase:firebase-core:16.0.6'
    implementation 'com.google.firebase:firebase-storage:16.0.5'
    implementation 'com.google.firebase:firebase-auth:16.1.0'
}
